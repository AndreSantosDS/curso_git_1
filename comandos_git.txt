git init serve para inicializar um novo repositório Git em um diretório. Ele cria uma pasta oculta chamada .git que permite ao Git começar a rastrear versões dos arquivos naquele projeto.


git status serve para mostrar o estado atual do repositório.
Ele informa:
Quais arquivos foram modificados.
Quais arquivos ainda não foram adicionados ao staging (git add).
Quais arquivos estão prontos para serem commitados.
Se você está em uma branch e qual é ela.
Se há commits pendentes para enviar (push) ou receber (pull).


git add . serve para adicionar todas as mudanças feitas nos arquivos do projeto ao stage (área de preparação) do Git.
Ou seja, ele prepara todos os arquivos modificados, criados ou deletados para serem incluídos no próximo commit.


git commit -m "mensagem" serve para salvar as alterações feitas no seu projeto com uma mensagem descritiva.
Explicando por partes:
git commit: registra (salva) as mudanças que você adicionou com git add.
-m "mensagem": permite escrever uma mensagem explicando o que foi feito naquela alteração (por exemplo: "corrige bug no login").
Também é possível comitar um arquivo por vez -> git commit 1_primeiro_repo/a.txt  -m "Estou enviando o arquivo de texto"

git branch -M main serve para renomear a branch atual para "main", forçando a mudança mesmo que já exista uma branch com esse nome.
Resumo:
-M = "mover" (rename) forçando a substituição, se necessário.
main = novo nome da branch.


git push -u origin main  serve para enviar (push) a branch main do seu repositório local para o repositório remoto chamado origin, e ao mesmo tempo configurar a branch main local para rastrear (-u = --set-upstream) a branch main remota.
Isso significa que, depois desse comando, você pode usar só git push ou git pull sem precisar especificar o origin main toda vez.


git pull serve para atualizar seu repositório local com as últimas mudanças do repositório remoto.
Ele faz duas coisas de uma vez:
git fetch → Baixa as atualizações do repositório remoto.
git merge → Junta essas atualizações com a sua branch atual.
Exemplo prático:
Se outra pessoa fez alterações e enviou para o GitHub, você usa git pull para trazer essas alterações para o seu computador.


git clone é um comando usado para copiar um repositório remoto para sua máquina local.
O que ele faz:
Baixa todos os arquivos do projeto.
Copia o histórico completo de commits.
Já configura o repositório remoto (geralmente chamado de origin).


git rm é usado para remover arquivos do seu repositório Git.
Ele faz duas coisas ao mesmo tempo:
Remove o arquivo do seu diretório local (do sistema de arquivos).
Marca o arquivo para remoção no próximo commit, ou seja, o Git entende que esse arquivo deve ser apagado do histórico do repositório.
Depois que for feito o commit e o push o arquivo também vai ser removido do github.


git log serve para exibir o histórico de commits de um repositório Git.
Ele mostra uma lista com informações dos commits feitos, incluindo:
Hash (ID) do commit (código único)
Autor do commit
Data e hora
Mensagem do commit



git mv é usado para mover ou renomear arquivos ou diretórios em um repositório Git.
Resumidamente:
Ele move ou renomeia um arquivo e já registra isso para o próximo commit.

Você tem um arquivo chamado relatorio.txt e quer renomeá-lo para relatorio-final.txt.
Comando: git mv relatorio.txt relatorio-final.txt

Se você está dentro da pasta css/ e quer renomear um arquivo, por exemplo, style.css para main.css, aqui está como fazer: git mv css/style.css css/main.css

Você tem um arquivo chamado reset.css na pasta raiz do projeto e quer movê-lo para a pasta css/ -> git mv reset.css css/reset.css

Depois faça o commit e o push



git checkout pode ser usado para desfazer alterações em arquivos que ainda não foram commitados. Isso significa que, se você modificou um arquivo, mas ainda não fez um git add seguido de git commit, é possível reverter essas alterações com git checkout.
Exemplo de como Desfazer alterações em um arquivo específico:
git checkout css/styles.css


O arquivo .gitignore serve para dizer ao Git quais arquivos ou pastas não devem ser incluídos no controle de versão. Ou seja, ele evita que arquivos temporários, de configuração local, builds, senhas, ou arquivos gerados automaticamente sejam enviados para o repositório.
Exemplo:
Se você colocar no .gitignore a linha node_modules/, o Git vai ignorar toda a pasta node_modules ao fazer commits.
Resumindo:
.gitignore define o que o Git deve ignorar para não rastrear nem versionar.



git reset --hard HEAD~1 -> Isso apaga o commit mais recente e restaura os arquivos para o estado do commit anterior.

git reset --hard -> faz o Git voltar para um estado anterior e descarta todas as alterações no diretório de trabalho e na área de staging (index).
Explicação rápida:
reset → move o ponteiro do branch atual para um commit anterior.
--hard → descarta todas as alterações locais (inclusive arquivos modificados e não salvos com git add).


Para visualizar os branchs disponíveis basta digitar git branch

Para criar uma branch você precisa utilizar o comando git branch nome_da_branch

Para deletar uma branch utilize o comando git branch -d ou --delete nome_da_branch

Podemos mudar para outro branch utilizando o comando git checkout nome_da_branch

O comando git checkout -b nome_da_branch cria uma branch nova e automaticamente ele muda para essa branch criada


Comando git marge
1-Você está na branch main.
2-Existe outra branch chamada feature-login com algumas alterações.
3-Para unir as mudanças da feature-login na main, você faz:
git checkout main -> garante que está na main
git merge feature-login -> mescla as mudanças da feature-login


git stash é usado para salvar temporariamente mudanças não commitadas no seu repositório Git, permitindo que você volte a um estado limpo da branch atual (sem perder o que estava fazendo).
Situação comum:
Você está trabalhando em algo, mas precisa mudar de branch para resolver um problema urgente — só que você ainda não quer commitar suas mudanças atuais. O que fazer?
Use git stash para "guardar" essas mudanças de lado, mudar de branch, e depois "restaurá-las" quando quiser.

Podemos verificar as stashs criadas pelo comando git stash list

O comando git stash apply 0(número da stash) -> serve para recuperar o codigo que foi adicionado na stash 

O comando git stash show -p 0(número da stash) -> serve para verificar as mudanças de uma stash

Para limpar totalmente as stash de um branch podemos utilizar o comando git stash clear

Caso seja necessário deletar uma stash especifica podemos utilizar git stash drop 1(número da stash)



As tags no Git servem para marcar pontos específicos na história do repositório, geralmente usados para identificar versões importantes do projeto, como lançamentos (v1.0, v2.1.3, etc.).
Principais usos das tags:
1-Marcar versões de lançamento
ºEx: Quando você termina uma versão estável do projeto, pode criar uma tag v1.0.0.
2-Facilitar deploy e testes
ºFerramentas de CI/CD ou scripts de produção/testes podem buscar uma versão específica por meio da tag.
3-Referência imutável
ºUma tag aponta para um commit específico e não muda (diferente de branches).

Antes de criar uma tag utilize os comandos git add . e o git commit

Podemos criar tags nos branches por meio do comando git tag -a <nome> -m "<msg>" -> git tag -a v1.0 -m "versão estável 1.0"

O comando git tag lista todas as tags

O comando git show v1.0(nome da tag) serve para ver os detalhes da tag(as alterações que foram feitas e adicionadas a essa tag)

Podemos trocar de tags com o comando git checkout v2.0(nome da tag)

E se quiser enviar a tag para o repositório remoto: git push origin v1.0(nome da tag)

Se você quiser enviar mais tags git push origin --tags